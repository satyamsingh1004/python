pandas.DataFrame.loc: Access a group of rows and columns by index label(s) or a boolean array.

pandas.get_dummies: Convert categorical variable into dummy/indicator variables.

a = b = 0
The one-line syntax results in a and b having the same memory address - i.e. they refer to the same object

help(), Docstrings """ description string """ - The docstring is a triple-quoted string (which may span multiple lines) that comes immediately after the header of a function. 
When we call help() on a function, it shows the docstring.

Functions that do not return - The result of calling them is the special value None. 
print(1, 2, 3, sep=' < ')

Functions Applied to Functions
You can supply functions as arguments to other functions. 
Functions that operate on other functions are called "higher-order functions." 
max(100, 51, 14, key=mod_5)

"pass" is a keyword that does literally nothing.

True or True and False
True
and is evaluated before or

print(bool(1)) # all numbers are treated as true, except 0
print(bool("asf")) # all strings are treated as true, except the empty string ""

We can even make a list of lists:

A list can contain a mix of different types of variables:

my_favourite_things = [32, 'raindrops on roses', help]

Elements at the end of the list can be accessed with negative numbers, starting from -1:

Slicing
planets[0:3]
planets[:3]
planets[3:]

# All the planets except the first and last
planets[1:-1]

planets[-3:]

Lists are "mutable", meaning they can be modified "in place".
planets[:3] = ['Mur', 'Vee', 'Ur']

List functions: len,sorted, sum,min,max

everything in Python is an object

List methods
list.append, list.pop, list.index , "Earth" in planets, 

Tuples: 2: They cannot be modified (they are immutable).
t = (1, 2, 3)
t = 1, 2, 3 # equivalent to above
Tuples are often used for functions that have multiple return values.

Python's triple quote syntax for strings lets us include newlines literally 

Strings can be thought of as sequences of characters. Almost everything we've seen that we can do to a list, we can also do to a string.

[char+'! ' for char in planet]

strings are immutable

datestr = '1956-01-31'
year, month, day = datestr.split('-')

'/'.join([month, day, year])

"{}, you'll always be the {}th planet to me.".format(planet, position)

Dictionaries
numbers = {'one':1, 'two':2, 'three':3}

import * makes all the module's variables directly accessible to you (without any dotted prefix).

dir()

def get_acronym(string_input):
    return ''.join([word[0].upper() for word in string_input.split()])

















